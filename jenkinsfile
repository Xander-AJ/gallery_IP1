pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = credentials('GitHub_PAT') // Replace 'GitHub_PAT' with your actual credential ID
        MONGODB_CONNECTION = credentials('mongodb-connection')
        GITHUB_REPO_URL = 'https://github.com/Xander-AJ/gallery_IP1'
        Render_Server_URL = 'https://john-alexander-ip-1.onrender.com/' // Set the Render server URL
    }

    stages {
        stage('Source Code Management') {
            steps {
                // Checkout the code from your Git repository.
                checkout([$class: 'GitSCM',
                          branches: [[name: 'master']], 
                          userRemoteConfigs: [[url: env.GITHUB_REPO_URL, credentialsId: 'Xander-AJ']]
                ])
            }
        }

        stage('Build and Tests') {
            steps {
                script {
                    // Verify the existence of a package.json file.
                    def packageJsonExists = fileExists('package.json')

                    if (packageJsonExists) {
                        // Install project dependencies with npm.
                        sh 'npm install'
                        
                        // Run the "npm run build" command to build your project.
                        sh 'npm run build'
                    } else {
                        error('package.json not found. This is not a Node.js project.')
                    }
                }
            }
        }

        stage('Deployment to Render and MongoDB') {
            steps {
                script {
                    // Access the GitHub PAT
                    def githubPat = env.GITHUB_CREDENTIALS

                    // Access the MongoDB connection string
                    def mongoConnectionString = env.MONGODB_CONNECTION

                    // Access the Render server URL
                    def renderServerURL = env.Render_Server_URL

                    // Deploy your application to Render
                    // Start the server using 'node server'
                    sh "npm install -g serve" // Install a simple HTTP server
                    sh "serve -s build -l 3000 &" // Start the server in the background

                    // Connect to MongoDB 
                    sh "mongo ${mongoConnectionString}"


                    sh "curl -sSf $renderServerURL" // This command checks if the site is accessible.
                }
            }
        }
    }
    post {
        failure {
            // Send an email notification if any stage fails
            emailext(
                to: 'xander.kamau7@gmail.com',
                subject: "Pipeline Failed: ${currentBuild.fullDisplayName}",
                body: "The Jenkins pipeline has failed. Please investigate.",
                attachLog: true
            )
        }
    }
}
